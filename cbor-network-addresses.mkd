---
title: CBOR tags for IPv4 and IPv6 addresses and prefixes
abbrev: CBOR-IP
docname: draft-ietf-cbor-network-addresses-05

stand_alone: true

ipr: trust200902
area: Internet
wg: CBOR Working Group
kw: Internet-Draft
cat: std
consensus: true

pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:


- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca

- name: Carsten Bormann
  org: UniversitÃ¤t Bremen TZI
  email: cabo@tzi.org
  country: Germany

normative:
  RFC8949:
  RFC8610: cddl

informative:

--- abstract

This specification describes two CBOR Tags to be used with IPv4 and IPv6 addresses and prefixes.

[^track]

[^track]: RFC-EDITOR-please-remove: This work is tracked at https://github.com/cbor-wg/cbor-network-address

--- middle

# Introduction

{{RFC8949}} defines a number of CBOR Tags for common items.
Tags 260 and 261 were later defined through IANA.
These tags cover addresses (260), and prefixes (261).
Tag 260 distinguishes between IPv4, IPv6 and Ethernet through the length of the byte string only.
Tag 261 was not documented well enough to be used.

This specification provides a format for IPv6 and IPv4 addresses, prefixes,
and addresses with prefixes, achieving an explicit indication of IPv4 or IPv6.
Prefixes omit trailing zeroes in the address.
(Due to the complexity of testing, the value of omitting trailing zeros for addresses was considered non-essential and support for that was removed in this specification.)

This specification does not deal with 6 or 8-byte Ethernet addresses.

# Terminology

{::boilerplate bcp14}

# Protocol

## Three Forms

### Addresses

These tags can be applied to byte strings to represent a single address.

This form is called the Address Format.

### Prefixes

When applied to an array that starts with a number, they represent a
CIDR-style prefix of that length.

When an Address (byte string), i.e., without prefix) appears in a context where a prefix is expected, then it is to be assumed that all bits are relevant.
That is, for IPv4, a /32 is implied, and for IPv6, a /128 is implied.

This form is called the Prefix Format.

### Interface Definition

When applied to an array that starts with a byte string, that stands
for an IP address, followed by the bit length of a prefix built out of
the first `length` bits of the address.

This form is called the Interface Format, or Interface Definition.


## IPv6

IANA has allocated tag 54 for IPv6 uses.
(Note that this is the ASCII code for '6'.)

An IPv6 address is to be encoded as a sixteen-byte byte string
({{Section 3.1 of RFC8949}}, major type 2), enclosed in Tag number 54.

For example:

~~~~
54(h'20010db81234DEEDBEEFCAFEFACEFEED')
~~~~

An IPv6 prefix, such as 2001:db8:1234::/48 is to be encoded as a two element array, with the length of the prefix first.
Trailing zero bytes MUST be omitted.

For example:

~~~~
54([48, h'20010db81234'])
~~~~

An IPv6 address combined with a prefix length, such as being used for
configuring an interface, is to be encoded as a two element array,
with the (full-length) IPv6 address first and the length of the
associated network the prefix next.


For example:

~~~~
54([h'20010db81234DEEDBEEFCAFEFACEFEED', 56])
~~~~

Note that the address-with-prefix form can be reliably distinguished
from the prefix form only in the sequence of the array elements.

## IPv4

IANA has allocated tag 52 for IPv4 uses.
(Note that this is the ASCII code for '4'.)

An IPv4 address is to be encoded as a four-byte byte string
({{Section 3.1 of RFC8949}}, major type 2), enclosed in Tag number 52.


For example:

~~~~
52(h'C0000201')
~~~~

An IPv4 prefix, such as 192.0.2.0/24 is to be encoded as a two element array, with the length of the prefix first.
Trailing zero bytes MUST be omitted.

For example:

~~~~
52([24, h'C00002'])
~~~~


An IPv4 address combined with a prefix length, such as being used for
configuring an interface, is to be encoded as a two element array,
with the (full-length) IPv4 address first and the length of the
associated network the prefix next.

For example,  192.0.2.1/24 is to be encoded as a two element array,
with the length of the prefix (implied 192.0.2.0/24) last.

~~~~
52([h'C0000201', 24])
~~~~

Note that the address-with-prefix form can be reliably distinguished
from the prefix form only in the sequence of the array elements.


# Encoder Considerations for Prefixes

For the byte strings used in representing prefixes,
an encoder MUST omit any right-aligned (trailing) sequence of bytes that are all zero.

There is no relationship between the number of bytes omitted and the prefix length.
For instance, the prefix 2001:db8::/64 is encoded as:

~~~~
54([64, h'20010db8'])
~~~~

An encoder MUST take care to set all trailing bits in the final byte
to zero, if any.  While decoders are expected to ignore them, such garbage entities could be used as a covert channel, or may reveal the state of what would otherwise be private memory contents.  So for example, `2001:db8:1230::/44`
MUST be encoded as:

~~~~
52([44, h'20010db81230'])
~~~~

even though variations like:

~~~~
54([44, h'20010db81233'])  WRONG
54([45, h'20010db8123f'])  WRONG
~~~~

would be parsed in the exact same way.

The same considerations apply to IPv4 prefixes.

# Decoder Considerations for Prefixes

A decoder MUST consider all bits to the right of the prefix length to be zero.

A decoder MUST handle the case where a prefix length specifies that more bits are relevant than are actually present in the byte-string.  As a pathological case, ::/128 can be
encoded as

~~~~
54([128, h''])
~~~~

A recommendation for implementations is to first create an array of 16 (or 4) zero bytes.

Then taking whichever is smaller between (a) the length of the
included byte-string, and (b) the number of bytes covered by the
prefix-length rounded up to the next multiple of 8: fail if that
number is greater than 16 (or 4), and then copy that many bytes from
the byte-string into the array.

Finally, looking at the last three bits of the prefix-length in bits
(that is, the prefix-length modulo 8), use a static array of 8 values
to force the lower, non-relevant bits to zero, or simply:

~~~ c
unused_bits = (-prefix_length_in_bits) & 7;
if (length_in_bytes > 0)
  address_bytes[length_in_bytes - 1] &= (0xFF << unused_bits);
~~~

A particularly paranoid decoder could examine the lower non-relevant bits to determine if they are non-zero, and reject the prefix.
This would detect non-compliant encoders, or a possible covert channel.

~~~ c
if (length_in_bytes > 0 &&
    (address_bytes[length_in_bytes - 1] & ~(0xFF << unused_bits))
    != 0)
  fail();
~~~


# CDDL

For use with CDDL {{-cddl}}, the typenames defined in {{cddl-types}}
are recommended:

~~~~ cddl

ip-address-or-prefix = ipv6-address-or-prefix /
                       ipv4-address-or-prefix

ipv6-address-or-prefix = #6.54(ipv6-address /
                               ipv6-address-with-prefix /
                               ipv6-prefix)
ipv4-address-or-prefix = #6.52(ipv4-address /
                               ipv4-address-with-prefix /
                               ipv4-prefix)

ipv6-address = bytes .size 16
ipv4-address = bytes .size 4

ipv6-address-with-prefix = [ipv6-address, ipv6-prefix-length]
ipv4-address-with-prefix = [ipv4-address, ipv4-prefix-length]

ipv6-prefix-length = 0..128
ipv4-prefix-length = 0..32

ipv6-prefix = [ipv6-prefix-length, ipv6-prefix-bytes]
ipv4-prefix = [ipv4-prefix-length, ipv4-prefix-bytes]

ipv6-prefix-bytes = bytes .size (uint .le 16)
ipv4-prefix-bytes = bytes .size (uint .le 4)

~~~~
{: #cddl-types title=""}

# Security Considerations

Identifying which byte sequences in a protocol are addresses may allow an attacker or eavesdropper to better understand what parts of a packet to attack.
That information, however, is likely to be found in the relevant RFCs anyway, so this is not a significant exposure.

The right-hand bits of the prefix, after the prefix-length, are ignored by this protocol.
A malicious party could use them to transmit covert data in a way that would not affect the primary use of this encoding.
Such abuse would be detected by examination of the raw protocol bytes.
Users of this encoding should be aware of this possibility.

# IANA Considerations

IANA has allocated two tags from the Specification Required area of the Concise Binary Object Representation (CBOR) Tags:

## Tag 54 - IPv6

~~~~
Data Item: byte string or array
Semantics: IPv6, [prefixlen,IPv6], [IPv6,prefixpart]
~~~~

## Tag 52 - IPv4

~~~~
Data Item: byte string or array
Semantics: IPv4, [prefixlen,IPv4], [IPv4,prefixpart]
~~~~


--- back

# Changelog
{: removeinrfc="true"}

* 03
* 02
* 01 added security considerations about covert channel

# Acknowledgements
{: numbered="false"}

none yet
